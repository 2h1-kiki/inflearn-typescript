/**
 * 제네릭
 * - 영어로 일반적인, 포괄적인
 * - 제네릭 함수: 모든 타입의 두루두루 쓸 수 있는 범용적인 함수
 */

// 제네릭 함수 - 함수의 인수에 따라 반환 값의 타입을 가변적으로 정할 수 있음
// 제네릭 함수를 만들기 위해서는 타입변수 선언 필요 - 타입변수는 함수명 뒤에 <>를 넣어주면된다.
function func<T>(value: T): T {
	// 함수의 반환값 타입은 함수의 return값을 기준으로 추론
	return value;
}
/**
 * <T> : 타입변수
 * - 인수의 타입이 어떤 타입에 따라 타입변수에 저장되는 타입이 달라진다.
 */


let num = func(10);

let bool = func(true);

let str = func('string');

/**
 * 정리
 * - <T> 타입변수와 함께 여러 타입의 값을 인수로 받아서 범용적으로 쓸
 * 수 있는 함수를 제네릭 함수라고 한다.
 * - 제네릭 함수는 타입변수를 꺽쇠와 함께 함수명 뒤에 선언을 하고 
 * 타입 변수에 할당되는 타입은 함수를 호출 할 때
 * 인수에 따라서 결정된다.
 */

/**
 * 추가
 * 제네릭 함수를 호출 할 때 타입 변수에 할당되는 타입을
 * 인수를 통해 추론하지 않고,
 * 프로그래머가 명시적으로 정의 가능
 */
let arr = func([1, 2, 3])

// 튜플타입으로 추론 될 수 있게 하는 방법은?
// 1. 타입 단언을 통해 튜플타입 선언
let arrTupple = func([1, 2, 3] as [number, number, number])
/** 
 * 2. 함수를 호출 할 대 함수명 뒤에 꺽쇠를 열고
 * T에 할당하고 싶은 타입을 튜플타입으로 적어주면 된다.
 */ 
let arrTupple2 = func<[number, number, number]>([1,2,3])